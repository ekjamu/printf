Secrets of “printf”
Professor Don Colton
Brigham Young University Hawaii
printf is the C language function to do formatted printing. The same function is also available in
PERL. This paper explains how printf works, and
how to design the proper formatting specification for
any occasion.
1 Background
In the early days, computer programmers would
write their own subroutines to read in and print out
numbers. It is not terribly difficult, actually. Just
allocate a character array to hold the result, divide
the number by ten, keep the remainder, add x30 to
it, and store it at the end of the array. Repeat the
process until all the digits are found. Then print it.
Too easy, right?
But even though it was easy (for Einstein), it still
took some effort. And what about error checking,
and negative numbers? So the computer programmers brought forth libraries of prerecorded functions. And it was good. Eventually the most popular
of these functions were canonized into membership
in the “standard” libraries. Number printing was
popular enough to gain this hallowed honor.
This meant that programmers did not have to
reinvent the number-printing subroutine again and
again. It also meant that everybody’s favorite options tried to make it into the standard.
Thus was printf born.

Write a function that produces output according to a format.

Prototype: int _printf(const char *format, ...);
Returns: the number of characters printed (excluding the null byte used to end output to strings)
write output to stdout, the standard output stream
format is a character string. The format string is composed of zero or more directives. See man 3 printf for more detail. You need to handle the following conversion specifiers:
c
s
%
You don’t have to reproduce the buffer handling of the C library printf function
You don’t have to handle the flag characters
You don’t have to handle field width
You don’t have to handle precision
You don’t have to handle the length modifiers
Repo:

GitHub repository: printf

Submitted by Eugene K. Jamu & Penanje Phillip
